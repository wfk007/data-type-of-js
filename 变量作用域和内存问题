# 变量、作用域和内存问题

## 基本类型和引用类型

### 复制变量值

- ![基本类型赋值](http://i4.buimg.com/1949/cf2d77d5498b92e0.png)

- ![引用类型赋值](http://i4.buimg.com/1949/632a61a09bfc73bb.png)

### 传递参数

- **ES中所有函数的参数都是按值传递的**，基本类型的值传递如同基本类型变量复制一样，引用类型的值传递如同引用类型变量复制一样。即传递基本类型的值，被传递的值会被复制给一个局部变量，传递引用类型的值,会把这个值在**内存中的地址复制给一个局部变量,这个局部变量的变化会反映在函数外部**

### 检测类型

- 检测基本数据类型时使用 typeof
- 检测引用类型时使用 instanceof

## 执行环境及作用域

### 作用域链

- 执行环境的类型只有两种：全局和局部（函数）
- 当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链的前端，始终都是当前执行的代码所在环境的变量对象。
- 搜索过程始终从作用域链的前端开始，然后逐级地向后回溯，直至找到标识符为止。

### 延长作用域链

当执行流进入下列任何一个语句时，作用域链就会得到加长：

- try-catch 语句的 catch块
- with 语句

### 没有块级作用域

- 使用 var 声明的变量会自动被添加到最近的环境中，如果初始时没有用 var 声明，则添加到全局环境
